// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package telemetry

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i TaskStore -t gowrap_template -o task_store_gen.go -l ""

import (
	"context"

	"go.opentelemetry.io/otel/trace"
	_sourcePersistence "go.temporal.io/server/common/persistence"
)

// telemetryTaskStore implements TaskStore interface instrumented with OpenTelemetry.
type telemetryTaskStore struct {
	_sourcePersistence.TaskStore
	tracer trace.Tracer
}

// newTelemetryTaskStore returns telemetryTaskStore.
func newTelemetryTaskStore(base _sourcePersistence.TaskStore, tracer trace.Tracer) telemetryTaskStore {
	return telemetryTaskStore{
		TaskStore: base,
		tracer:    tracer,
	}
}

// CompleteTasksLessThan wraps TaskStore.CompleteTasksLessThan.
func (d telemetryTaskStore) CompleteTasksLessThan(ctx context.Context, request *_sourcePersistence.CompleteTasksLessThanRequest) (i1 int, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/CompleteTasksLessThan")
	defer span.End()

	i1, err = d.TaskStore.CompleteTasksLessThan(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// CountTaskQueuesByBuildId wraps TaskStore.CountTaskQueuesByBuildId.
func (d telemetryTaskStore) CountTaskQueuesByBuildId(ctx context.Context, request *_sourcePersistence.CountTaskQueuesByBuildIdRequest) (i1 int, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/CountTaskQueuesByBuildId")
	defer span.End()

	i1, err = d.TaskStore.CountTaskQueuesByBuildId(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// CreateTaskQueue wraps TaskStore.CreateTaskQueue.
func (d telemetryTaskStore) CreateTaskQueue(ctx context.Context, request *_sourcePersistence.InternalCreateTaskQueueRequest) (err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/CreateTaskQueue")
	defer span.End()

	err = d.TaskStore.CreateTaskQueue(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// CreateTasks wraps TaskStore.CreateTasks.
func (d telemetryTaskStore) CreateTasks(ctx context.Context, request *_sourcePersistence.InternalCreateTasksRequest) (cp1 *_sourcePersistence.CreateTasksResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/CreateTasks")
	defer span.End()

	cp1, err = d.TaskStore.CreateTasks(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// DeleteTaskQueue wraps TaskStore.DeleteTaskQueue.
func (d telemetryTaskStore) DeleteTaskQueue(ctx context.Context, request *_sourcePersistence.DeleteTaskQueueRequest) (err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/DeleteTaskQueue")
	defer span.End()

	err = d.TaskStore.DeleteTaskQueue(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// GetTaskQueue wraps TaskStore.GetTaskQueue.
func (d telemetryTaskStore) GetTaskQueue(ctx context.Context, request *_sourcePersistence.InternalGetTaskQueueRequest) (ip1 *_sourcePersistence.InternalGetTaskQueueResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/GetTaskQueue")
	defer span.End()

	ip1, err = d.TaskStore.GetTaskQueue(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// GetTaskQueueUserData wraps TaskStore.GetTaskQueueUserData.
func (d telemetryTaskStore) GetTaskQueueUserData(ctx context.Context, request *_sourcePersistence.GetTaskQueueUserDataRequest) (ip1 *_sourcePersistence.InternalGetTaskQueueUserDataResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/GetTaskQueueUserData")
	defer span.End()

	ip1, err = d.TaskStore.GetTaskQueueUserData(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// GetTaskQueuesByBuildId wraps TaskStore.GetTaskQueuesByBuildId.
func (d telemetryTaskStore) GetTaskQueuesByBuildId(ctx context.Context, request *_sourcePersistence.GetTaskQueuesByBuildIdRequest) (sa1 []string, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/GetTaskQueuesByBuildId")
	defer span.End()

	sa1, err = d.TaskStore.GetTaskQueuesByBuildId(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// GetTasks wraps TaskStore.GetTasks.
func (d telemetryTaskStore) GetTasks(ctx context.Context, request *_sourcePersistence.GetTasksRequest) (ip1 *_sourcePersistence.InternalGetTasksResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/GetTasks")
	defer span.End()

	ip1, err = d.TaskStore.GetTasks(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// ListTaskQueue wraps TaskStore.ListTaskQueue.
func (d telemetryTaskStore) ListTaskQueue(ctx context.Context, request *_sourcePersistence.ListTaskQueueRequest) (ip1 *_sourcePersistence.InternalListTaskQueueResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/ListTaskQueue")
	defer span.End()

	ip1, err = d.TaskStore.ListTaskQueue(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// ListTaskQueueUserDataEntries wraps TaskStore.ListTaskQueueUserDataEntries.
func (d telemetryTaskStore) ListTaskQueueUserDataEntries(ctx context.Context, request *_sourcePersistence.ListTaskQueueUserDataEntriesRequest) (ip1 *_sourcePersistence.InternalListTaskQueueUserDataEntriesResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/ListTaskQueueUserDataEntries")
	defer span.End()

	ip1, err = d.TaskStore.ListTaskQueueUserDataEntries(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// UpdateTaskQueue wraps TaskStore.UpdateTaskQueue.
func (d telemetryTaskStore) UpdateTaskQueue(ctx context.Context, request *_sourcePersistence.InternalUpdateTaskQueueRequest) (up1 *_sourcePersistence.UpdateTaskQueueResponse, err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/UpdateTaskQueue")
	defer span.End()

	up1, err = d.TaskStore.UpdateTaskQueue(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}

// UpdateTaskQueueUserData wraps TaskStore.UpdateTaskQueueUserData.
func (d telemetryTaskStore) UpdateTaskQueueUserData(ctx context.Context, request *_sourcePersistence.InternalUpdateTaskQueueUserDataRequest) (err error) {
	ctx, span := d.tracer.Start(ctx, "persistence.TaskStore/UpdateTaskQueueUserData")
	defer span.End()

	err = d.TaskStore.UpdateTaskQueueUserData(ctx, request)
	if err != nil {
		span.RecordError(err)
	}

	return
}
